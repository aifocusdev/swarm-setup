version: '3.8'

networks:
  traefik-public:
    external: true

volumes:
  setup-data:
    driver: local

services:
  # ============================================================================
  # SETUP WEB SERVER - Interface Web para Instalação
  # ============================================================================
  setup-web:
    image: nginx:alpine
    volumes:
      - setup-data:/usr/share/nginx/html
      - ./setup-web/:/usr/share/nginx/html/setup:ro
      - ./setup-web/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      - traefik-public
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
      labels:
        # Traefik configuration
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        
        # HTTP router (redirect to HTTPS)
        - traefik.http.routers.setup-http.rule=Host(`setup.aifocus.dev`)
        - traefik.http.routers.setup-http.entrypoints=web
        - traefik.http.routers.setup-http.middlewares=https-redirect
        
        # HTTPS router
        - traefik.http.routers.setup-https.rule=Host(`setup.aifocus.dev`)
        - traefik.http.routers.setup-https.entrypoints=websecure
        - traefik.http.routers.setup-https.tls=true
        - traefik.http.routers.setup-https.tls.certresolver=letsencrypt
        - traefik.http.routers.setup-https.middlewares=default-chain
        
        # Service configuration
        - traefik.http.services.setup-web.loadbalancer.server.port=80
        
        # Custom middleware for setup
        - traefik.http.middlewares.setup-headers.headers.customRequestHeaders.X-Setup-Mode=true
        - traefik.http.middlewares.setup-headers.headers.customResponseHeaders.X-Powered-By=AiFocus-Setup
        
    environment:
      - NGINX_HOST=setup.aifocus.dev
      - NGINX_PORT=80
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ============================================================================
  # SETUP API - Backend para Executar Scripts
  # ============================================================================
  setup-api:
    image: node:18-alpine
    working_dir: /app
    volumes:
      - ./setup-api:/app:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workspace:ro
    networks:
      - traefik-public
    environment:
      - NODE_ENV=production
      - API_PORT=3000
      - SETUP_DOMAIN=aifocus.dev
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
      labels:
        # Traefik configuration for API
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.http.routers.setup-api.rule=Host(`setup.aifocus.dev`) && PathPrefix(`/api`)
        - traefik.http.routers.setup-api.entrypoints=websecure
        - traefik.http.routers.setup-api.tls=true
        - traefik.http.routers.setup-api.tls.certresolver=letsencrypt
        - traefik.http.routers.setup-api.middlewares=api-chain
        - traefik.http.services.setup-api.loadbalancer.server.port=3000
    
    command: >
      sh -c "
        npm install express cors helmet body-parser &&
        node server.js
      "
    
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# ============================================================================
# CONFIGURAÇÃO DE DEPLOY
# ============================================================================

# Para usar este stack:
# 1. Configure o DNS setup.aifocus.dev apontando para seu load balancer
# 2. Execute: docker stack deploy -c setup-web.yml setup
# 3. Acesse: https://setup.aifocus.dev 