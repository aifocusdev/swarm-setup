# ============================================================================
# N8N + TYPEBOT - COMPLETE AUTOMATION & CHATBOT STACK
# Advanced Workflow Automation and Conversational AI
# ============================================================================

version: '3.8'

services:
  # ============================================================================
  # N8N - WORKFLOW AUTOMATION PLATFORM
  # ============================================================================
  
  n8n:
    image: docker.n8n.io/n8nio/n8n:latest
    
    environment:
      # Database Configuration
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres-primary
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${N8N_DB_NAME:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_POSTGRESDB_SCHEMA: public
      
      # Application Configuration
      N8N_HOST: n8n.${DOMAIN}
      N8N_PROTOCOL: https
      N8N_PORT: 5678
      N8N_LISTEN_ADDRESS: 0.0.0.0
      WEBHOOK_URL: https://n8n.${DOMAIN}
      
      # Security Configuration
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: ${N8N_BASIC_AUTH_USER:-admin}
      N8N_BASIC_AUTH_PASSWORD: ${N8N_BASIC_AUTH_PASSWORD}
      N8N_JWT_AUTH_ACTIVE: true
      N8N_JWT_AUTH_HEADER: authorization
      N8N_JWT_AUTH_HEADER_VALUE_PREFIX: Bearer
      N8N_JWKS_URI: https://n8n.${DOMAIN}/.well-known/jwks.json
      
      # Email Configuration
      N8N_EMAIL_MODE: smtp
      N8N_SMTP_HOST: ${SMTP_ADDRESS}
      N8N_SMTP_PORT: ${SMTP_PORT:-587}
      N8N_SMTP_USER: ${SMTP_USERNAME}
      N8N_SMTP_PASS: ${SMTP_PASSWORD}
      N8N_SMTP_SENDER: ${MAILER_SENDER_EMAIL:-noreply@${DOMAIN}}
      N8N_SMTP_SSL: false
      
      # Features Configuration
      N8N_PERSONALIZATION_ENABLED: true
      N8N_VERSION_NOTIFICATIONS_ENABLED: false
      N8N_DIAGNOSTICS_ENABLED: false
      N8N_DEFAULT_BINARY_DATA_MODE: filesystem
      N8N_BINARY_DATA_TTL: 168
      N8N_BINARY_DATA_STORAGE_PATH: /home/node/.n8n/binaryData
      
      # Performance Configuration
      EXECUTIONS_DATA_PRUNE: true
      EXECUTIONS_DATA_MAX_AGE: 168
      EXECUTIONS_DATA_PRUNE_MAX_COUNT: 10000
      N8N_METRICS: true
      
      # Timezone
      GENERIC_TIMEZONE: America/Sao_Paulo
      TZ: America/Sao_Paulo
      
      # Custom Nodes
      N8N_CUSTOM_EXTENSIONS: /opt/custom_nodes
      
      # Queue Configuration (Redis)
      QUEUE_BULL_REDIS_HOST: redis-master
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}
      QUEUE_BULL_REDIS_DB: 2
      
      # Encryption
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      
      # Logging
      N8N_LOG_LEVEL: info
      N8N_LOG_OUTPUT: console,file
      N8N_LOG_FILE_COUNT_MAX: 100
      N8N_LOG_FILE_SIZE_MAX: 16
      
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_files:/files
      - n8n_custom_nodes:/opt/custom_nodes
      - n8n_backups:/backups
    
    networks:
      - traefik-public
      - database-internal
      - automation-internal
    
    secrets:
      - source: n8n_encryption_key
        target: /run/secrets/encryption_key
    
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.labels.availability-zone
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
      labels:
        # Traefik configuration
        - traefik.enable=true
        - traefik.http.routers.n8n.rule=Host(`n8n.${DOMAIN}`)
        - traefik.http.routers.n8n.tls=true
        - traefik.http.routers.n8n.tls.certresolver=letsencrypt
        - traefik.http.services.n8n.loadbalancer.server.port=5678
        - traefik.docker.network=traefik-public
        
        # Session stickiness for websockets
        - traefik.http.services.n8n.loadbalancer.sticky.cookie=true
        - traefik.http.services.n8n.loadbalancer.sticky.cookie.name=n8n_session
        
        # Websocket support
        - traefik.http.routers.n8n.middlewares=n8n-headers@docker
        - traefik.http.middlewares.n8n-headers.headers.customRequestHeaders.X-Forwarded-Proto=https
        - traefik.http.middlewares.n8n-headers.headers.customRequestHeaders.X-Forwarded-For=
        
        # Security
        - traefik.http.routers.n8n.middlewares=security-headers@docker,rate-limit@docker
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5678/healthz || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    depends_on:
      - postgres-primary
      - redis-master

  # ============================================================================
  # N8N WORKER - Background Job Processing
  # ============================================================================
  
  n8n-worker:
    image: docker.n8n.io/n8nio/n8n:latest
    command: worker
    
    environment:
      # Same database configuration as main n8n
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres-primary
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${N8N_DB_NAME:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Queue Configuration
      QUEUE_BULL_REDIS_HOST: redis-master
      QUEUE_BULL_REDIS_PORT: 6379
      QUEUE_BULL_REDIS_PASSWORD: ${REDIS_PASSWORD}
      QUEUE_BULL_REDIS_DB: 2
      
      # Worker Configuration
      N8N_WORKERS_AUTO_START: true
      EXECUTIONS_MODE: queue
      
      # Performance
      N8N_BINARY_DATA_STORAGE_PATH: /home/node/.n8n/binaryData
      
      # Encryption
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      
      # Timezone
      GENERIC_TIMEZONE: America/Sao_Paulo
      TZ: America/Sao_Paulo
      
      # Logging
      N8N_LOG_LEVEL: info
      N8N_LOG_OUTPUT: console
    
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_files:/files
      - n8n_custom_nodes:/opt/custom_nodes
    
    networks:
      - database-internal
      - automation-internal
    
    secrets:
      - source: n8n_encryption_key
        target: /run/secrets/encryption_key
    
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.labels.availability-zone
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 1.5G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.3'
      labels:
        - n8n.service=worker
    
    healthcheck:
      test: ["CMD-SHELL", "ps aux | grep n8n | grep -v grep || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    depends_on:
      - postgres-primary
      - redis-master
      - n8n

  # ============================================================================
  # TYPEBOT BUILDER - Bot Creation Interface
  # ============================================================================
  
  typebot-builder:
    image: baptistearno/typebot-builder:latest
    
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-typebot}:${POSTGRES_PASSWORD}@postgres-primary:5432/${TYPEBOT_DB_NAME:-typebot}
      
      # Application Configuration
      NEXTAUTH_URL: https://typebot.${DOMAIN}
      NEXT_PUBLIC_VIEWER_URL: https://bot.${DOMAIN}
      
      # Authentication
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      ENCRYPTION_SECRET: ${TYPEBOT_ENCRYPTION_SECRET}
      
      # Admin Configuration
      ADMIN_EMAIL: ${ADMIN_EMAIL:-admin@${DOMAIN}}
      
      # Email Configuration (same as N8N)
      SMTP_HOST: ${SMTP_ADDRESS}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      SMTP_SECURE: false
      SMTP_AUTH_DISABLED: false
      FROM_EMAIL: ${MAILER_SENDER_EMAIL:-noreply@${DOMAIN}}
      FROM_NAME: "AiFocus Typebot"
      
      # Features
      DISABLE_SIGNUP: false
      IS_SELFHOSTED: true
      
      # S3 Configuration (MinIO)
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-aifocus}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET: typebot
      S3_ENDPOINT: https://minio-api.${DOMAIN}
      
      # WhatsApp Integration
      WHATSAPP_PREVIEW_FROM_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
      WHATSAPP_PREVIEW_FROM_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN}
      
      # Custom Domain
      CUSTOM_DOMAIN: ${DOMAIN}
    
    volumes:
      - typebot_data:/app/packages/db/prisma
    
    networks:
      - traefik-public
      - database-internal
      - automation-internal
    
    deploy:
      mode: replicated
      replicas: 2
      placement:
        constraints:
          - node.role == worker
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.3'
      labels:
        # Traefik configuration
        - traefik.enable=true
        - traefik.http.routers.typebot-builder.rule=Host(`typebot.${DOMAIN}`)
        - traefik.http.routers.typebot-builder.tls=true
        - traefik.http.routers.typebot-builder.tls.certresolver=letsencrypt
        - traefik.http.services.typebot-builder.loadbalancer.server.port=3000
        - traefik.docker.network=traefik-public
        
        # Session stickiness
        - traefik.http.services.typebot-builder.loadbalancer.sticky.cookie=true
        - traefik.http.services.typebot-builder.loadbalancer.sticky.cookie.name=typebot_session
        
        # Security
        - traefik.http.routers.typebot-builder.middlewares=security-headers@docker
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    
    depends_on:
      - postgres-primary

  # ============================================================================
  # TYPEBOT VIEWER - Bot Execution Engine
  # ============================================================================
  
  typebot-viewer:
    image: baptistearno/typebot-viewer:latest
    
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://${POSTGRES_USER:-typebot}:${POSTGRES_PASSWORD}@postgres-primary:5432/${TYPEBOT_DB_NAME:-typebot}
      
      # Application Configuration
      NEXTAUTH_URL: https://typebot.${DOMAIN}
      NEXT_PUBLIC_VIEWER_URL: https://bot.${DOMAIN}
      
      # Encryption
      ENCRYPTION_SECRET: ${TYPEBOT_ENCRYPTION_SECRET}
      
      # S3 Configuration (MinIO)
      S3_ACCESS_KEY: ${MINIO_ROOT_USER:-aifocus}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET: typebot
      S3_ENDPOINT: https://minio-api.${DOMAIN}
      
      # WhatsApp Integration
      WHATSAPP_PREVIEW_FROM_PHONE_NUMBER_ID: ${WHATSAPP_PHONE_NUMBER_ID}
      WHATSAPP_PREVIEW_FROM_ACCESS_TOKEN: ${WHATSAPP_ACCESS_TOKEN}
      
      # Performance
      DISABLE_ANIMATIONS: false
      
    networks:
      - traefik-public
      - database-internal
      - automation-internal
    
    deploy:
      mode: replicated
      replicas: 3
      placement:
        constraints:
          - node.role == worker
        preferences:
          - spread: node.labels.availability-zone
      update_config:
        parallelism: 1
        delay: 10s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
      labels:
        # Traefik configuration
        - traefik.enable=true
        - traefik.http.routers.typebot-viewer.rule=Host(`bot.${DOMAIN}`)
        - traefik.http.routers.typebot-viewer.tls=true
        - traefik.http.routers.typebot-viewer.tls.certresolver=letsencrypt
        - traefik.http.services.typebot-viewer.loadbalancer.server.port=3000
        - traefik.docker.network=traefik-public
        
        # Performance optimizations
        - traefik.http.middlewares.typebot-compress.compress=true
        - traefik.http.routers.typebot-viewer.middlewares=typebot-compress@docker,security-headers@docker
        
        # Health check
        - traefik.http.services.typebot-viewer.loadbalancer.healthcheck.path=/api/health
        - traefik.http.services.typebot-viewer.loadbalancer.healthcheck.interval=30s
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    
    depends_on:
      - postgres-primary
      - typebot-builder

  # ============================================================================
  # FLOWISE - LOW-CODE AI CHATBOT BUILDER
  # ============================================================================
  
  flowise:
    image: flowiseai/flowise:latest
    
    environment:
      # Database Configuration
      DATABASE_TYPE: postgres
      DATABASE_HOST: postgres-primary
      DATABASE_PORT: 5432
      DATABASE_NAME: ${FLOWISE_DB_NAME:-flowise}
      DATABASE_USER: ${POSTGRES_USER:-flowise}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Application Configuration
      FLOWISE_USERNAME: ${FLOWISE_USERNAME:-admin}
      FLOWISE_PASSWORD: ${FLOWISE_PASSWORD}
      FLOWISE_SECRETKEY_OVERWRITE: ${FLOWISE_SECRET_KEY}
      
      # Features
      DISABLE_FLOWISE_TELEMETRY: true
      
      # Logging
      LOG_LEVEL: info
    
    volumes:
      - flowise_data:/root/.flowise
    
    networks:
      - traefik-public
      - database-internal
      - automation-internal
    
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - node.role == worker
      update_config:
        parallelism: 1
        delay: 30s
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 15s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          memory: 1G
          cpus: '0.8'
        reservations:
          memory: 512M
          cpus: '0.3'
      labels:
        # Traefik configuration
        - traefik.enable=true
        - traefik.http.routers.flowise.rule=Host(`flowise.${DOMAIN}`)
        - traefik.http.routers.flowise.tls=true
        - traefik.http.routers.flowise.tls.certresolver=letsencrypt
        - traefik.http.services.flowise.loadbalancer.server.port=3000
        - traefik.docker.network=traefik-public
        
        # Security
        - traefik.http.routers.flowise.middlewares=auth@docker,security-headers@docker
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/v1/ping || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s
    
    depends_on:
      - postgres-primary

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  # N8N
  n8n_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/aifocus/data/n8n
  
  n8n_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/aifocus/data/n8n/files
  
  n8n_custom_nodes:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/aifocus/data/n8n/custom-nodes
  
  n8n_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/aifocus/backups/n8n
  
  # Typebot
  typebot_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/aifocus/data/typebot
  
  # Flowise
  flowise_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/aifocus/data/flowise

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  traefik-public:
    external: true
  
  database-internal:
    external: true
  
  automation-internal:
    driver: overlay
    attachable: true
    ipam:
      config:
        - subnet: 172.23.0.0/16

# ============================================================================
# SECRETS
# ============================================================================

secrets:
  n8n_encryption_key:
    external: true