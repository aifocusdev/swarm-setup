#!/bin/bash

# ============================================================================
# AIFOCUS SWARM - DEPLOY AUTOM√ÅTICO
# Script de deploy r√°pido para aifocus.dev
# ============================================================================

# Cores para output
verde="\033[32m"
amarelo="\033[33m"
vermelho="\033[31m"
azul="\033[34m"
magenta="\033[35m"
ciano="\033[36m"
branco="\033[37m"
reset="\033[0m"

clear
echo -e "$ciano======================================================================================================"
echo -e "  üöÄ AIFOCUS SWARM - DEPLOY AUTOM√ÅTICO"
echo -e "  Infraestrutura Enterprise para aifocus.dev"
echo -e "======================================================================================================$reset"
echo ""

# Verificar se estamos no diret√≥rio correto
if [ ! -f "terraform.tfvars" ]; then
    echo -e "$vermelho ‚ùå Arquivo terraform.tfvars n√£o encontrado! $reset"
    echo -e "$amarelo Execute este script do diret√≥rio correto. $reset"
    exit 1
fi

echo -e "$verde ‚úÖ Arquivo de configura√ß√£o encontrado! $reset"
echo ""

# Mostrar configura√ß√£o
echo -e "$amarelo üìã CONFIGURA√á√ÉO DO DEPLOY: $reset"
echo -e "$branco   Dom√≠nio: aifocus.dev $reset"
echo -e "$branco   Managers: 3x cx31 $reset"
echo -e "$branco   Workers: 2x cx21 $reset"
echo -e "$branco   Load Balancer: Sim $reset"
echo -e "$branco   DNS Autom√°tico: Cloudflare $reset"
echo -e "$branco   Custo Estimado: ‚Ç¨71/m√™s $reset"
echo ""

echo -e "$amarelo üåê SUBDOM√çNIOS QUE SER√ÉO CRIADOS: $reset"
echo -e "$branco   ‚úÖ portainer.aifocus.dev    # Gerenciamento Docker $reset"
echo -e "$branco   ‚úÖ traefik.aifocus.dev      # Load Balancer $reset"
echo -e "$branco   ‚úÖ grafana.aifocus.dev      # Dashboards $reset"
echo -e "$branco   ‚úÖ prometheus.aifocus.dev   # M√©tricas $reset"
echo -e "$branco   ‚úÖ chat.aifocus.dev         # Chatwoot $reset"
echo -e "$branco   ‚úÖ evolution.aifocus.dev    # WhatsApp API $reset"
echo -e "$branco   ‚úÖ uptime.aifocus.dev       # Monitoramento $reset"
echo ""

read -p "$(echo -e $amarelo"Deseja continuar com o deploy? (y/n): "$reset)" confirma

if [ "$confirma" != "y" ] && [ "$confirma" != "Y" ]; then
    echo -e "$amarelo Deploy cancelado. $reset"
    exit 0
fi

echo ""
echo -e "$verde üöÄ INICIANDO DEPLOY DA INFRAESTRUTURA... $reset"
echo ""

# Verificar/Instalar Terraform
if ! command -v terraform &> /dev/null; then
    echo -e "$amarelo üì• Instalando Terraform... $reset"
    
    # Detectar sistema operacional
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    ARCH=$(uname -m)
    
    case $ARCH in
        x86_64) ARCH="amd64" ;;
        aarch64) ARCH="arm64" ;;
        arm64) ARCH="arm64" ;;
    esac
    
    # Download e instala√ß√£o
    wget -q "https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_${OS}_${ARCH}.zip"
    unzip -q "terraform_1.6.6_${OS}_${ARCH}.zip"
    sudo mv terraform /usr/local/bin/
    rm "terraform_1.6.6_${OS}_${ARCH}.zip"
    
    echo -e "$verde ‚úÖ Terraform instalado! $reset"
fi

# Verificar vers√£o do Terraform
TERRAFORM_VERSION=$(terraform version -json | jq -r '.terraform_version' 2>/dev/null || terraform version | head -1 | cut -d' ' -f2 | cut -d'v' -f2)
echo -e "$azul ‚ÑπÔ∏è  Terraform vers√£o: $TERRAFORM_VERSION $reset"
echo ""

# Passo 1: Terraform Init
echo -e "$amarelo üîÑ [1/4] Inicializando Terraform... $reset"
if terraform init; then
    echo -e "$verde ‚úÖ Terraform inicializado! $reset"
else
    echo -e "$vermelho ‚ùå Erro ao inicializar Terraform! $reset"
    exit 1
fi
echo ""

# Passo 2: Terraform Plan
echo -e "$amarelo üìã [2/4] Criando plano de execu√ß√£o... $reset"
if terraform plan -out=tfplan; then
    echo -e "$verde ‚úÖ Plano criado com sucesso! $reset"
else
    echo -e "$vermelho ‚ùå Erro ao criar plano! $reset"
    exit 1
fi
echo ""

# Passo 3: Terraform Apply
echo -e "$amarelo üèóÔ∏è  [3/4] Aplicando infraestrutura... $reset"
echo -e "$azul ‚è±Ô∏è  Isso pode levar 8-12 minutos... $reset"
echo ""

if terraform apply tfplan; then
    echo -e "$verde ‚úÖ Infraestrutura criada com sucesso! $reset"
else
    echo -e "$vermelho ‚ùå Erro ao aplicar infraestrutura! $reset"
    exit 1
fi
echo ""

# Passo 4: Coletar Outputs
echo -e "$amarelo üìÑ [4/4] Coletando informa√ß√µes... $reset"
terraform output > terraform-outputs.txt

echo ""
echo -e "$ciano======================================================================================================$reset"
echo -e "$verde üéâ DEPLOY CONCLU√çDO COM SUCESSO! $reset"
echo -e "$ciano======================================================================================================$reset"
echo ""

echo -e "$amarelo üìã PR√ìXIMOS PASSOS: $reset"
echo -e "$branco   1. ‚è±Ô∏è  Aguarde 5-10 minutos para configura√ß√£o completa dos servidores $reset"
echo -e "$branco   2. üåê Teste os acessos abaixo $reset"
echo -e "$branco   3. üîê Configure senhas nos primeiros acessos $reset"
echo ""

echo -e "$amarelo üåê ACESSOS DISPON√çVEIS: $reset"
echo -e "$branco   Portainer:   https://portainer.aifocus.dev $reset"
echo -e "$branco   Traefik:     https://traefik.aifocus.dev $reset"  
echo -e "$branco   Grafana:     https://grafana.aifocus.dev $reset"
echo -e "$branco   Prometheus:  https://prometheus.aifocus.dev $reset"
echo ""

echo -e "$amarelo üìä INFORMA√á√ïES T√âCNICAS: $reset"
echo -e "$branco   Outputs salvos em: terraform-outputs.txt $reset"
echo -e "$branco   Estado Terraform: terraform.tfstate $reset"
echo ""

echo -e "$amarelo üîß COMANDOS √öTEIS: $reset"
echo -e "$branco   Ver servidores: terraform output $reset"
echo -e "$branco   Destruir tudo: terraform destroy $reset"
echo -e "$branco   Logs:          tail -f /var/log/cloud-init-output.log $reset"
echo ""

echo -e "$amarelo ‚ö†Ô∏è  LEMBRETE DE SEGURAN√áA: $reset"
echo -e "$branco   Regenere as credenciais da API ap√≥s o setup por seguran√ßa! $reset"
echo ""

echo -e "$verde üöÄ SUA INFRAESTRUTURA ENTERPRISE EST√Å PRONTA! $reset"
echo ""

# Mostrar IPs dos servidores
if command -v jq &> /dev/null; then
    echo -e "$amarelo üåê IPs DOS SERVIDORES: $reset"
    terraform output -json | jq -r '
        if .manager_ips.value then
            (.manager_ips.value[] | "  Manager: \(.)"),
            (.worker_ips.value[]? | "  Worker:  \(.)")
        else
            "  Verifique: terraform output"
        end'
    echo ""
fi

echo -e "$azul Pressione ENTER para finalizar... $reset"
read -r 